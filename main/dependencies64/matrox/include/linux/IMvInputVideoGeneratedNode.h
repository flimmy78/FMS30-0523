//==========================================================================;
//
// (c) Copyright Matrox Electronic Systems Ltd., 2002. All rights reserved.
//
// This code and information is provided "as is" without warranty of any kind,
// either expressed or implied, including but not limited to the implied
// warranties of merchantability and/or fitness for a particular purpose.
//
// Disclaimer: Matrox Electronic Systems Ltd. reserves the right to make
// changes in specifications and code at any time and without notice.
// No responsibility is assumed by Matrox Electronic Systems Ltd. for
// its use; nor for any infringements of patents or other rights of
// third parties resulting from its use. No license is granted under
// any patents or patent rights of Matrox Electronic Systems Ltd.
//
//==========================================================================;
//                    IMVINPUTVIDEOGENERATEDNODE.H
//==========================================================================;
// @module  Matrox Video DirectShow
//==========================================================================;
//   Birth Date:             May 20, 2003
//   Operating System:       WinXP
//   Author:                 DirectShow team
//==========================================================================;
//   Matrox Electronic Systems Ltd.
//   Dorval, Quebec, Canada
//==========================================================================;

#ifndef IMVINPUTVIDEOGENERATEDNODE_H
#define IMVINPUTVIDEOGENERATEDNODE_H
#include "IMvTreeNode.h"

/**
 * Video input generated node interface, used to tell transform filter that
 * it has to generate a color for this input video stream.
 *  
 */
interface IMvInputVideoGeneratedNode : public IMvTreeNode {
public:

   /**
    * Initializes object state when object recycling is used.
    *
    * <br><b>Remark:</b>
    * <ul><i><li>Using this function is optional, it is only needed if you are managing a pool of node objects that need to be recycled.
    *        <li>A node cannot be initialized twice, "Flush" needs to be called beforehand in order to reset object state.
    * </i></ul>
    *
    * <b>Return Type:</b>
    * <ul><li>HRESULT</ul>
    *
    * <b>Return Values:</b>
    * <ul><li>MV_NOERROR, if completed successfully.
    *     <li>MV_E_WRONG_STATE, if node is already initialized.
    *     <li>HRESULT error code, if failed.
    * </ul>    
    */
   virtual HRESULT __stdcall Init() = 0;

   /** 
    * Resets object state when object recycling is used. 
    *
    * <br><b>Remark:</b>
    * <ul><i><li>Using this function is optional, it is only needed if you are managing a pool of node objects that need to be recycled.
    *        <li>This function will fail if the node is still part of a tree.
    * </i></ul>
    *
    * <b>Return Type:</b>
    * <ul><li>HRESULT</ul>
    *
    * <b>Return Values:</b>
    * <ul><li>MV_NOERROR, if completed successfully.
    *     <li>MV_E_WRONG_STATE, if node is still part of a tree and cannot be flushed.
    *     <li>HRESULT error code, if failed.
    * </ul>
    */
   virtual HRESULT __stdcall Flush() = 0;

   /**
    * Sets the color to be generated by the transform filter.
    *
    * <br><b>Remark:</b>
    * <ul><i><li>Uses the Flex EMvColor enumeration.
    *        <li>Default value inside the node is black opaque, "kEMvColorBlack".
    * </i></ul>
    *
    * <b>Return Type:</b>
    * <ul><li>HRESULT</ul>
    *
    * <b>Return Values:</b>
    * <ul><li>MV_NOERROR, if completed successfully.
    *     <li>HRESULT error code, if failed.
    * </ul>
    * @param EMvColor in_eMvColorGenerated: Flex color definition.
    * @param float in_fOpacity: Opacity value (0.0 -> Totally invisible, 1.0 -> Totally opaque).
    */
   virtual HRESULT __stdcall SetGeneratedColor(EMvColor in_eMvColorGenerated,
                                               float in_fOpacity) = 0;

   /**
    * Gets the color to be generated by the transform filter.
    *
    * <br><b>Remark:</b>
    * <ul><i><li>Uses the Flex EMvColor enumeration.
    * </i></ul>
    *
    * <b>Return Type:</b>
    * <ul><li>HRESULT</ul>
    *
    * <b>Return Values:</b>
    * <ul><li>MV_NOERROR, if completed successfully.
    *     <li>HRESULT error code, if failed.
    * </ul>
    * @param EMvColor & out_refeMvColorGenerated: Flex color definition receiver.
    * @param float & out_reffOpacity: Opacity value (0.0 -> Totally invisible, 1.0 -> Totally opaque).
    */
   virtual HRESULT __stdcall GetGeneratedColor(EMvColor &out_refeMvColorGenerated,
                                               float &out_reffOpacity) = 0;
};



#endif //IMVINPUTVIDEOGENERATEDNODE_H




